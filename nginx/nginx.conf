load_module modules/ngx_http_js_module.so;

worker_processes  auto;  ## Default: 1

error_log /dev/stdout info;
# error_log /var/log/nginx/error.log crit;

events {
    worker_connections  4096;  ## Default: 1024

    # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    multi_accept on;
}
http {
    js_import session.js;

    include /etc/nginx/mime.types;

    # Sendfile copies data between one FD and other from within the kernel.
    sendfile on;

    # Causes nginx to attempt to send its HTTP response head in one packet,  instead of using partial frames.
    tcp_nopush on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 20;

    # Number of requests a client can make over the keep-alive connection.
    keepalive_requests 200;

    # Allow the server to close the connection after a client stops responding.
    reset_timedout_connection on;

    server {
        listen 80;

        root /etc/nginx/static;

        location / {
        }

        location /handle_request {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            js_content session.handleRequest;
        }

        location /redisadapter {
           internal;
           redis2_raw_query $arg_query;
           redis2_pass redis:6379;
        }

        location /generate_session {
            add_header Access-Control-Allow-Origin *;
            proxy_pass http://app:8080/generate_session;

        }

        location /img {
            add_header Access-Control-Allow-Origin *;
            proxy_pass http://app:8080/img/${arg_captcha_key}.jpeg;
        }

        location @captcha {
            rewrite ^ /captcha/index.html break;

            sub_filter '<img src="{{.}}">'  '<img src="http://${http_Host}/img?captcha_key=${sent_http_captcha_key}">';
            sub_filter_once on;
        }

        location @home {
            rewrite ^ /home/index.html break;
        }
    }
}